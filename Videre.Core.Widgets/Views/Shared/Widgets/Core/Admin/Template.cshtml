@using System.Collections.Generic;
@using Videre.Core.Extensions;
@using Models = Videre.Core.Models;
@using System.Web.Mvc.Html;
@using Videre.Core.Services;
@using Bootstrap = Videre.Core.Extensions.Bootstrap;
@using CoreServices = Videre.Core.Services;
@using Plugin = Videre.Core.Extensions.Bootstrap.Controls.BootstrapDropDownListModel.Plugin;
@model Models.Widget

@{
    Html.RegisterWebReferenceGroup("datatables");
    Html.RegisterWebReferenceGroup("dynatree");

    var manifests = CoreServices.Widget.GetWidgetManifests();
    var layouts = CoreServices.UI.GetLayouts();
    var layoutTemplates = CoreServices.Portal.GetLayoutTemplates();
    var themes = CoreServices.UI.GetThemes();
    var isLayout = Model.GetAttribute("IsLayout", false);

    Html.RegisterControlPresenter("videre.widgets.admin.template", Model, new {
        manifestData = manifests,
        layoutData = layouts,
        layoutTemplateData = layoutTemplates,
        isLayout = isLayout
    });
}

<div id="@Model.GetId("Widget")">
    @{Html.RenderPartial("WidgetHeader", Model);}
    @{Html.RenderPartial("WidgetSectionHeader", Model, new ViewDataDictionary(new { SectionHeader = Model.GetText("WidgetTitle.Text", "Template Administration") }));}

    <p>@Html.Raw(Model.GetText("Instructions.Text", "Template administration allows you to create new pages to view along with specifying their layout and widgets.  The general tab allows you to choose the layout, roles, title, and one or more urls to associate with your template.  The layout table allows you to drag widgets onto your layout's panes.  Additionally, some widgets like Text/Html provide an editor to put content in when you click the menu and then edit."))</p>
    <div class="row">
        <div class="col-md-3">
            <div class="btn-toolbar" role="toolbar">
                <div class="btn-group">
                    @Html.Bootstrap().Button("btnNew").ButtonSize(BootstrapUnits.ButtonSize.Small).Text("NewEntry.Text", "New Entry", true).Icon("glyphicon glyphicon-plus")
                </div>
            </div>
            <div id="@Model.GetId("Tree")" style="overflow: auto; height: 500px; padding:0; margin:0;" class="col-md-12"></div>
        </div>
        <div id="@Model.GetId("TemplateCtr")" class="col-md-9" style="display: none;">
            <table class="table table-striped table-bordered table-condensed" id="@Model.GetId("ItemTable")">
                <thead>
                    <tr>
                        <th></th>
                        @{if (!isLayout)
                          {                               
                            <th>@Model.GetText("Title.Text", "Title")</th>
                            <th>@Model.GetText("Urls.Text", "Urls")</th>
                          }
                          else 
                          {
                            <th>@Model.GetText("Layout.Text", "Layout")</th>
                            <th>@Model.GetText("Layout View.Text", "Layout View")</th>
                              
                          }}
                    </tr>
                </thead>
                <tbody id="@Model.GetId("ItemList")"></tbody>
            </table>
            <script id="@Model.GetId("ItemListTemplate")" type="text/html">
                <tr>
                    <td>
                        <div class="btn-group">
                            @Html.Bootstrap().Button().DataAttribute("id", "{{:Id}}").DataAttribute("action", "edit").Icon("glyphicon glyphicon-pencil").ButtonSize(BootstrapUnits.ButtonSize.ExtraSmall)
                            @Html.Bootstrap().Button().DataAttribute("id", "{{:Id}}").DataAttribute("action", "delete").Icon("glyphicon glyphicon-trash").ButtonSize(BootstrapUnits.ButtonSize.ExtraSmall)
                        </div>
                    </td>
                    @{if (!isLayout)
                      {                               
                        <td>{{:Title}}</td>
                        <td>
                            <ul class="list-unstyled">
                            {{for Urls}}
                                <li>
                                    {{:#data}}
                                </li>
                            {{/for}}
                            </ul>
                        </td>
                      }
                      else 
                      {
                        <td>{{:LayoutName}}</td>
                        <td>{{:LayoutViewName}}</td>
                      }}
                </tr>
            </script>
        </div>
        <div id="@Model.GetId("TemplateEdit")" class="col-md-9" style="display: none;">
            @{Html.RenderPartial("WidgetHeader", Model);}

            @(Html.Bootstrap().Tabs(new List<Bootstrap.Controls.BootstrapTab>() 
            { 
                new Bootstrap.Controls.BootstrapTab() { Id = @Model.GetId("GeneralTab"), Text = @Model.GetText("General.Text", "General"), Active = true, Icon = "glyphicon glyphicon-cog" },
                new Bootstrap.Controls.BootstrapTab() { Id = @Model.GetId("LayoutAttributeTab"), Text = @Model.GetText("Attributes.Text", "Attributes"), Icon = "glyphicon glyphicon-list" },
                new Bootstrap.Controls.BootstrapTab() { Id = @Model.GetId("LayoutTab"), Text = @Model.GetText("Layout.Text", "Layout"), Icon = "glyphicon glyphicon-tasks" }
            }))

            <div class="tab-content">
                <div class="form-horizontal tab-pane active" id="@Model.GetId("GeneralTab")">
                    @{if (!isLayout)
                      {                               
                        @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Title.Text", "Title").GridSize(BootstrapUnits.GridSize.MediumDevice3), Html.Bootstrap().TextBox().DataColumn("Title"), BootstrapUnits.GridSize.MediumDevice9)
                        //@Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Urls.Text", "Urls").GridSize(BootstrapUnits.GridSize.MediumDevice3), Html.Bootstrap().TextArea().Rows(3).ControlType("list").DataColumn("Urls"), BootstrapUnits.GridSize.MediumDevice9)
                        @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Urls.Text", "Urls").GridSize(BootstrapUnits.GridSize.MediumDevice3), Html.Bootstrap().TagsInput().DataColumn("Urls"), BootstrapUnits.GridSize.MediumDevice9)
                        @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Layout.Text", "Layout").GridSize(BootstrapUnits.GridSize.MediumDevice3), Html.Bootstrap().DropDownList().Options(layoutTemplates.Select(l => new SelectListItem() { Value = l.Id, Text = l.LayoutName })).Plugin(Plugin.BootstrapSelect).DataColumn("LayoutId"), BootstrapUnits.GridSize.MediumDevice9)
                      }
                      else 
                      {
                        @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("LayoutName.Text", "Layout Name").GridSize(BootstrapUnits.GridSize.MediumDevice3), Html.Bootstrap().TextBox().DataColumn("LayoutName"), BootstrapUnits.GridSize.MediumDevice9)
                        @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("LayoutViewName.Text", "Layout View Name").GridSize(BootstrapUnits.GridSize.MediumDevice3), Html.Bootstrap().DropDownList().Options(layouts.Select(l => new SelectListItem() { Value = l.Name, Text = l.Name })).Plugin(Plugin.BootstrapSelect).DataColumn("LayoutViewName"), BootstrapUnits.GridSize.MediumDevice9)
                      }
                      }
                    @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Theme.Text", "Theme").GridSize(BootstrapUnits.GridSize.MediumDevice3), Html.Bootstrap().DropDownList().EmptyItem(new SelectListItem() { Value = "", Text = Model.GetText("None.Text", "None") }).Options(themes.Select(l => new SelectListItem() { Value = l.Name, Text = l.Name })).Plugin(Plugin.BootstrapSelect).DataColumn("ThemeName"), BootstrapUnits.GridSize.MediumDevice9)
                    @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Roles.Text", "Roles").GridSize(BootstrapUnits.GridSize.MediumDevice3), Html.Bootstrap().RoleList().Plugin(Plugin.BootstrapSelect).Multiple().DataColumn("RoleIds"), BootstrapUnits.GridSize.MediumDevice9)
                    @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Claims.Text", "Claims").GridSize(BootstrapUnits.GridSize.MediumDevice3), Html.Bootstrap().ClaimList().DataColumn("Claims").Multiple().Plugin(Plugin.BootstrapSelect), BootstrapUnits.GridSize.MediumDevice9)
                    @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("ExcludeClaims.Text", "Exclude Claims").GridSize(BootstrapUnits.GridSize.MediumDevice3), Html.Bootstrap().ClaimList().DataColumn("ExcludeClaims").Multiple().Plugin(Plugin.BootstrapSelect), BootstrapUnits.GridSize.MediumDevice9)
                    @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("Authentication.Text", "Authentication").GridSize(BootstrapUnits.GridSize.MediumDevice3), Html.Bootstrap().AuthorizedList().DataColumn("Authenticated").Plugin(Plugin.BootstrapSelect), BootstrapUnits.GridSize.MediumDevice9)
                    @Html.Bootstrap().FormGroup(Html.Bootstrap().Label("WebReferences.Text", "Web References").GridSize(BootstrapUnits.GridSize.MediumDevice3), Html.Bootstrap().DropDownList().Plugin(Plugin.BootstrapSelect).Options(CoreServices.Web.GetWebReferences().Select(r => new SelectListItem() { Text = r.Name, Value = r.Name } ).ToList()).DataColumn("WebReferences").Multiple(), BootstrapUnits.GridSize.MediumDevice9)

                </div>
                <div class="form-horizontal tab-pane" id="@Model.GetId("LayoutAttributeTab")">
                    <div id="@Model.GetId("LayoutAttributeList")" class="form-horizontal">
                    </div>
                    <script id="@Model.GetId("LayoutAttributeListTemplate")" type="text/html">
                        <div class="form-group">
                            <label class="control-label col-md-3">{{:Label}}</label>
                            <div class="col-md-9" data-type="input">
                                {{:~bindInputs(#data, ~attributes, null)}}
                            </div>
                        </div>
                    </script>
                </div>

                <div class="form-horizontal tab-pane" id="@Model.GetId("LayoutTab")">
                    <div class="row">
                        <div class="col-md-3" id="@Model.GetId("WidgetToolbar")" style="margin-bottom: 0;">
                            <div class="panel panel-default">
                                @{
                                    var containerId = 0;
                                    var categories = manifests.Select(m => m.Category).Distinct().OrderBy(m => m).ToList();
                                    var minHeight = 420 - (categories.Count * 32);
                                    foreach (var c in categories)
                                    {
                                        var category = string.IsNullOrEmpty(c) ? "(none)" : c;
                                        containerId++;
                                    <div class="panel-heading" style="padding: 2px;">
                                        <h6 class="panel-title">
                                            <span class="glyphicon glyphicon-list-alt"></span>
                                            <a data-toggle="collapse" data-parent="#@Model.GetId("WidgetToolbar")" href="@("#" + Model.GetId("collapse" + containerId))" style="padding: 5px;">
                                                @category
                                            </a>
                                        </h6>
                                    </div>
                                    <div id="@(Model.GetId("collapse" + containerId))" class="panel-collapse collapse @(containerId == 1 ? "in" : "")">
                                        <div class="panel-body videre dark-fill" style="padding: 2px; min-height: @(minHeight)px;">
                                            <div>
                                                @foreach (var m in manifests.Where(m => m.Category == c).OrderBy(m => m.Name))
                                                {
                                                    <div class="btn btn-default btn-xs col-md-12" data-manifestid="@m.Id" style="text-align: left;"><span class="glyphicon glyphicon-cog"></span> @m.Title</div>                                                   
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    }}
                            </div>
                        </div>
                        <div class="col-md-9 form-group designer-panes" id="@Model.GetId("Panes")" style="margin-left: -10px;">
                        </div>
                    </div>
                </div>
            </div>
            <div class="videre-form-actions">
                @Html.Bootstrap().Button("btnSave").ButtonStyle(BootstrapUnits.ButtonStyle.Primary).Text("Save.Text", "Save", true)
                @Html.Bootstrap().Button("btnCancel").Text("Cancel.Text", "Cancel", true)
            </div>
        </div>
        @{foreach (var manifest in manifests)
          {
              Html.RenderWidgetEditor(manifest);
          }
        }
    </div>
@*    <div class="videre actions form-actions">
        <a class="btn" href="@Url.Content("~/core/Portal/ExportTemplates")"><i class="icon-file"></i> @Model.GetPortalText("ExportTemplates.Text", "Export Templates")</a>
    </div>*@

</div>

